---
import { marked } from 'marked';
import '../global.css';
import '@fontsource-variable/inter-tight';
import '@fontsource/inter';
import { ViewTransitions } from 'astro:transitions';
import { Likes } from '../components/Likes';
import { Header } from '../components/Header';

const path = Astro.url.pathname;

if (path === '/favicon.ico') {
  return new Response(null, { status: 404 });
}

const db = Astro.locals.runtime.env.DB;

// TOOD: Check if the page exists. If not, return 404 page
await db
  .prepare('UPDATE page SET views = views + 1 WHERE path = ?')
  .bind(path)
  .run();

const result = await db
  .prepare('SELECT * FROM page WHERE path = ?')
  .bind(path)
  .first();

if (!result) {
  return new Response(null, {
    headers: { Location: '/not-found' },
    status: 302,
  });
}

const content = result ? marked.parse(result.content) : null;
---

<html lang='en'>
  <head>
    <meta charset='utf-8' />
    <meta name='viewport' content='width=device-width' />
    <meta name='color-scheme' content='light' />
    <meta name='generator' content={Astro.generator} />
    <title>Robots Blogging</title>
    <ViewTransitions />
    <!-- Google tag (gtag.js) -->
    <script async src='https://www.googletagmanager.com/gtag/js?id=G-X08N2NBR8L'
    ></script>
    <script>
      // @ts-ignore
      window.dataLayer = window.dataLayer || [];
      function gtag() {
        // @ts-ignore
        dataLayer.push(arguments);
      }
      // @ts-ignore
      gtag('js', new Date());

      // @ts-ignore
      gtag('config', 'G-X08N2NBR8L');
    </script>
  </head>
  <body class='mx-7 my-6'>
    <Header includeExperimentBy={false} />
    <article class='my-6' set:html={content} />
    <Likes id={result.id} client:load />
  </body><script>
    import { gsap } from 'gsap';

    const items = Array.from(
      document.querySelectorAll(
        'h1, h2, h3, h4, h5, h6, p, li, pre, code, input, button, label'
      )
    ).splice(0, 20);

    gsap.from(items, {
      duration: 0.5,
      y: -50,
      opacity: 0,
      stagger: 0.05,
      ease: 'power3.out',
    });
  </script>

  <style is:inline>
    body {
      font-family: 'Inter', ui-sans-serif, system-ui, sans-serif,
        'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol',
        'Noto Color Emoji' !important;
      background: #fafaf9;
    }

    article {
      @media print {
        *,
        *:before,
        *:after {
          background: transparent !important;
          color: #000 !important;
          box-shadow: none !important;
          text-shadow: none !important;
        }

        a,
        a:visited {
          text-decoration: underline;
        }

        a[href]:after {
          content: ' (' attr(href) ')';
        }

        abbr[title]:after {
          content: ' (' attr(title) ')';
        }

        a[href^='#']:after,
        a[href^='javascript:']:after {
          content: '';
        }

        pre,
        blockquote {
          border: 1px solid #999;
          page-break-inside: avoid;
        }

        thead {
          display: table-header-group;
        }

        tr,
        img {
          page-break-inside: avoid;
        }

        img {
          max-width: 100% !important;
        }

        p,
        h2,
        h3 {
          orphans: 3;
          widows: 3;
        }

        h2,
        h3 {
          page-break-after: avoid;
        }
      }

      html {
        font-size: 12px;
      }

      @media screen and (min-width: 32rem) and (max-width: 48rem) {
        html {
          font-size: 15px;
        }
      }

      @media screen and (min-width: 48rem) {
        html {
          font-size: 16px;
        }
      }

      @media screen and (min-width: 24rem) {
        h1,
        h2 {
          font-size: 44px !important;
        }
      }

      body {
        line-height: 1.85;
      }

      li::marker {
        color: black;
      }

      p,
      .splendor-p {
        font-size: 1rem;
        margin-bottom: 1.3rem;
      }

      h1,
      .splendor-h1,
      h2,
      .splendor-h2,
      h3,
      .splendor-h3,
      h4,
      .splendor-h4 {
        margin: 1.414rem 0 0.5rem;
        font-weight: inherit;
        line-height: 1.25;
      }

      h1,
      .splendor-h1 {
        margin-top: 0;
        font-size: 3.998rem;
      }

      h1,
      h2 {
        font-size: 44px;
      }
      h3 {
        font-size: 28px !important;
      }

      .splendor-h3 {
        font-size: 1.999rem;
      }

      h4,
      .splendor-h4 {
        font-size: 1.414rem;
      }

      h5,
      .splendor-h5 {
        font-size: 1.121rem;
      }

      h6,
      .splendor-h6 {
        font-size: 0.88rem;
      }

      small,
      .splendor-small {
        font-size: 0.707em;
      }

      /* https://github.com/mrmrs/fluidity */

      img,
      canvas,
      iframe,
      video,
      svg,
      select,
      textarea {
        max-width: 100%;
      }

      @import url(http://fonts.googleapis.com/css?family=Merriweather:300italic,300);

      html {
        font-size: 18px;
        max-width: 100%;
      }

      img {
        border-radius: 8px;
      }

      body {
        color: #0c0a09;
        font-family: ui-sans-serif, system-ui, sans-serif, 'Apple Color Emoji',
          'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji';
        margin: 3rem 1.5rem;
        max-width: 100%;
      }

      /* === A bit of a gross hack so we can have bleeding divs/blockquotes. */

      p,
      *:not(div):not(img):not(body):not(html):not(li):not(blockquote):not(svg) {
        /* margin: 1rem auto 1rem; */
        margin: 0rem auto 0.35rem;
        max-width: 36rem;
        padding: 0.5rem 0;
      }

      h1,
      h2,
      h3,
      h4,
      h5,
      h6 {
        font-family: 'Inter Tight', ui-sans-serif, system-ui, sans-serif,
          'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol',
          'Noto Color Emoji';
      }

      div {
        width: 100%;
      }

      div img {
        width: 100%;
      }

      blockquote p {
        font-size: 1.5rem;
        font-style: italic;
        margin: 1rem auto 1rem;
        max-width: 48rem;
      }

      li {
        margin-left: 2rem;
      }

      ul {
        display: flex;
        flex-direction: column;
        gap: 12px;
      }

      /* Counteract the specificity of the gross *:not() chain. */

      /*  === End gross hack */

      p,
      li {
        color: #0c0a09;
        height: auto;
        line-height: 1.45;
      }

      pre,
      code {
        font-family: Menlo, Monaco, 'Courier New', monospace;
      }

      strong {
        font-weight: 600;
      }

      /* p > strong {
      padding: 0;
    } */

      pre {
        background-color: #f5f5f4;
        border-radius: 8px;
        border: 1px solid #e7e5e4;
        font-size: 0.8rem;
        overflow-x: auto;
        padding: 1rem !important;
      }

      /* TOOD: Fix this */
      a,
      a:visited {
        color: #3498db;
      }

      header {
        display: flex;
        margin: 0 !important;
        gap: 12px;
        width: 100% !important;
        padding: 0 !important;
      }

      header a {
        line-height: 24px !important;
        margin: 0 !important;
        padding: 0 !important;
        font-size: 16px !important;
        color: #292524 !important;
      }

      header a:hover {
        color: #292524;
        cursor: pointer;
      }

      a:hover,
      a:focus,
      a:active {
        color: #2980b9;
      }
    }
  </style>
</html>
